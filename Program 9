/***
CSCI 240         Program 9     Fall 2017
Programmer: Afifah Arif
Date Due: December 1, 2017
Purpose: This program will use a class that can be used to represent a parabola.
***/

#include <iostream>	
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <cmath>

using namespace std;

class Parabola
{     
	public:
	Parabola ( double, double, double );
	void printEquation();
	void printConcavity();
	void printVertex();

	double calcX();
	double calcY();

	void printRoots();

	int calcRoots( double &, double & );

	double calcDiscrim();
	void print();

	private:
	double aCoeff, bCoeff, cCoeff;
};

int main() 
{
	Parabola One(1,4,-5);
	cout<<endl<<"*** The first parabola ***\n\n";
	One.print();

	Parabola Two(0,0,25);
	cout<<endl<<"\n*** The second parabola ***\n\n";
	Two.print();

	Parabola Three(-1,2,-1);
	cout<<endl<<"\n*** The third parabola ***\n\n";
	Three.printEquation();
	Three.printConcavity();

	Parabola Four(-12,-2,3);
	cout<<endl<<"\n*** The fourth parabola ***\n\n";
	Four.printRoots();

	Parabola Five(12,2,3);
	cout<<endl<<"\n*** The fith parabola ***\n\n";
	Five.printEquation();
	Five.printVertex();

	cin.get();
}

Parabola::Parabola(double a, double b, double c)
{
	aCoeff = a, bCoeff = b, cCoeff = c;
	if(a == 0)
		aCoeff = 1;
	if(b == 1)
		bCoeff = 2;
	if(c == 2)
		cCoeff = 3;    
}

double Parabola::calcDiscrim()
{
	return (bCoeff * bCoeff - 4 * aCoeff * cCoeff);
}

int Parabola::calcRoots(double &root1, double &root2) 
{
	int numRoots=0;
	double discriminant=calcDiscrim();

	if (discriminant < 0)
	{
		numRoots=0;
	}
	else if (discriminant ==0) 
	{
		root1 = ( (-1*bCoeff) + sqrt( discriminant )) / ( 2 * aCoeff );
		numRoots=1;
	}
	else if(discriminant > 0)
	{
		root1 = ( (-1*bCoeff) + sqrt( discriminant )) / ( 2 * aCoeff );
		root2 = ( (-1*bCoeff) - sqrt( discriminant )) / ( 2 * aCoeff );
		numRoots=2; 
	}
return numRoots;
}

double Parabola::calcX()
{
	return(-1*bCoeff / ( 2 * aCoeff));
}

double Parabola::calcY()
{
	double Xcord=calcX();
	return(( aCoeff * (Xcord*Xcord) ) + ( bCoeff * Xcord ) + cCoeff);
}

void Parabola::printEquation()
{
	cout<<fixed<<setprecision(1)<<aCoeff<<"x^2 + "<<bCoeff<<"x + "<<cCoeff <<endl; 
}

void Parabola::printVertex()
{
	cout << "   " <<"Vertex coordinates: "<< fixed <<setprecision(3)<<"("<< calcX()<<","<< calcY()<<")"<< endl;
}

void Parabola::printRoots()
{
	double root1, root2;
	int nRoots = calcRoots(root1, root2);
	if (nRoots == 0)
		cout << "   There are NO real roots\n";
	else if (nRoots == 1)
		cout << "   There is one real root with X-Coordinate\n" << root1;
	else if (nRoots == 2)
		cout << "   There are two real roots with X-Coordinates " << root1 << " and " << root2 << endl;
}

void Parabola::printConcavity()
{
	if (aCoeff>0)
		cout<<"   The parabola opens UPWARD\n";
	else  
		cout<<"   The parabola opens DOWNWARD\n";
}

void Parabola::print() 
{
	printEquation();
	printVertex();
	printRoots();
}
