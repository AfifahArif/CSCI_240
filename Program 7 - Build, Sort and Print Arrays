/***
CSCI 240     Program 7     Fall 2017
Programmer: Afifah Arif
Date Due: November 10, 2017
Purpose: This program builds, sorts and prints arrays.
***/

#include <ctime>		
#include <cstdlib>
#include <string>
#include <iostream>
#include <iomanip>

using namespace std;

double randDouble();
int buildArray(double array[]);
void printArray(double array[], int numberOfValues, string title);
void sortArray(double array[], int numberOfValues);
void mergeArrays(double array1[], int numberOfValues1, double array2[], int numberOfValues2, double largerArray[]);

const double LOWER_BOUND = 0.0;	
const double UPPER_BOUND = 100.0;
const int MIN_VALUES = 2;
const int MAX_VALUES = 50;
const int MAX_PER_LINE = 10;

int main() 
{
	srand(7);
	double arrayOne[50] = {};
	double arrayTwo[50] = {};
	double largerArray[100] = {};

	int numValuesOne;
	int numValuesTwo;

	numValuesOne = buildArray(arrayOne);
	numValuesTwo = buildArray(arrayTwo);

	string title;

	cout << "There are " << numValuesOne << " values in the first array\n\n";

	title = "Unsorted Random Numbers";
	printArray(arrayOne, numValuesOne, title);
	cout << "\n\n";

	title = "Sorted Random Numbers";
	sortArray(arrayOne, numValuesOne);
	printArray(arrayOne, numValuesOne, title);
	cout << "\n\n";

	cout << "There are " << numValuesTwo << " values in the second array\n\n";

	title = "Unsorted Random Numbers";
	printArray(arrayTwo, numValuesTwo, title);
	cout << "\n\n";

	title = "Sorted Random Numbers";
	sortArray(arrayTwo, numValuesTwo);
	printArray(arrayTwo, numValuesTwo, title);

	title = "Merged Array";
    mergeArrays(arrayOne, numValuesOne, arrayTwo, numValuesTwo, largerArray);
    sortArray(largerArray, numValuesOne + numValuesTwo);
    printArray(largerArray, numValuesOne + numValuesTwo, title);

	cin.clear();
	cin.get();
	return(0);	
}

double randDouble() 
{
	return(LOWER_BOUND + (rand() / (RAND_MAX / (UPPER_BOUND - LOWER_BOUND))));
}

int buildArray(double array[]) 
{   
	int nValues = rand() % (MAX_VALUES - MIN_VALUES + 1) + MIN_VALUES;
	for (int i = 0; i < nValues; i++) 
	{
		array[i] = randDouble();
	}
	return(nValues);
}

void printArray(double array[], int numberOfValues, string title) 
{       
	cout << title << "\n------------------------------------------------------------\n";
	for (int i = 0; i < numberOfValues; i++) 
	{
		cout << fixed << setprecision(1) << setw(3) <<right << array[i]; 
		cout << "  ";
		if ((i + 1) % MAX_PER_LINE == 0)
			cout << endl;
	}
	cout << endl;
	return;
}

void sortArray(double array[], int numberOfValues) 
{
	int i, j; double holder;
	bool swap = true;
	for (i = 0; (i <= (numberOfValues-1)) && swap; i++)
	{
		swap = false;
		for (j = 0; j < (numberOfValues - 1); j++) 
		{
			if (array[j + 1] < array[j]) 
			{
				holder = array[j];
				array[j] = array[j + 1];
				array[j + 1] = holder;
				swap = true;
			}
		}
	}
	return;
}

void mergeArrays(double array1[], int numberOfValues1, double array2[], int numberOfValues2, double largerArray[]) 
{
	cout << endl;
	int mergedarray = numberOfValues1 + numberOfValues2;
	cout << endl << "There are " << mergedarray << " values in the merged array.\n\n";
    int i;
    int j = 0;
    for(i = 0; i < numberOfValues1; i++) 
	{
        largerArray[j] = array1[i];
        j++;
    }
    for(i = 0; i < numberOfValues2; i++) 
	{
        largerArray[j] = array2[i];
        j++;
	}
}
